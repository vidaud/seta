from http import HTTPStatus
from urllib.parse import urljoin
from injector import inject

from flask import Blueprint, abort
from flask import current_app as app, g
from flask import request, session

from flask_github import GitHubError

from seta_flask_server.infrastructure.auth_helpers import (
    create_login_response,
    validate_next_url,
)
from seta_flask_server.infrastructure.extensions import github
from seta_flask_server.repository.interfaces import IUsersBroker, ISessionsBroker
from seta_flask_server.repository.models import SetaUserExt


auth_github = Blueprint("auth_github", __name__)


@auth_github.route("/login/github", methods=["GET"])
def login():
    """
    Redirect to GITHUB authentication page
    """
    next_url = request.args.get("redirect", None)
    session["redirect"] = next_url

    #! redirect uri must match the callback URL, so no other path is working
    return github.authorize(scope="read:user,user:email", redirect_uri=None)


@github.access_token_getter
def token_getter():
    """Get access token generated by github."""
    user = g.user
    if user is not None:
        return user["github_access_token"]

    return None


@auth_github.route("/login/callback/github", methods=["GET"])
@github.authorized_handler
@inject
def login_callback_github(
    access_token, user_broker: IUsersBroker, session_broker: ISessionsBroker
):
    """Callback after Github successful authentication"""

    if access_token is None:
        abort(HTTPStatus.UNAUTHORIZED, "Failed Github authorization.")

    usr = {"github_access_token": access_token}
    g.user = usr

    github_user = github.get("/user")

    app.logger.debug(str(github_user))

    if github_user["email"] is None:
        github_user["email"] = _get_user_email()

    # set dummy email
    if github_user["email"] is None:
        github_user["email"] = github_user["login"] + "_no_reply@github.com"

    admins = app.config.get("ROOT_USERS", [])
    email = str(github_user["email"]).lower()
    github_user["is_admin"] = email in admins

    seta_user = SetaUserExt.from_github_json(github_user)

    next_url = session.get("redirect")

    if not next_url or not validate_next_url(next_url):
        next_url = app.home_route

    next_url = urljoin(next_url, "?action=login")

    auth_user = user_broker.authenticate_user(seta_user)

    if auth_user is None:
        #! user is not active
        abort(HTTPStatus.UNAUTHORIZED, "The user couldn't be authenticated")

    response = create_login_response(
        seta_user=auth_user, session_broker=session_broker, next_url=next_url
    )

    return response


def _get_user_email() -> str:
    """Perform a GET request to retrieve the user email from Github"""

    try:
        # emails = github.get("/user/emails", headers={'Accept':'application/vnd.github+json'})
        emails = github.get("/user/emails")
        app.logger.debug(str(emails))

        if emails:
            for e in emails:
                if e["primary"]:
                    return e["email"]

            return emails[0]["email"]
    except GitHubError as ge:
        app.logger.exception(str(ge))

    return None
